---
import Layout from "@/layouts/Layout.astro";
import { Review, StillImageConfig } from "@/components/Review/Review";
import { PosterImageConfig } from "@/components/Review/Credits";
import { ChipAvatarImageConfig } from "@/components/Review/Chips";
import { allReviews } from "@/api/reviews";
import type { Review as IReview } from "@/api/reviews";
import { textStarsForGrade } from "@/utils/textStarsForGrade";
import { images, getStillImagePath, getStills } from "@/api/stills";
import { getImage } from "astro:assets";
import { getFluidWidthPosters } from "@/api/posters";
import type { PosterImageData } from "@/api/posters";
import type { StillImageData } from "@/api/stills";
import type { AvatarImageData } from "@/api/avatars";
import { getAvatars } from "@/api/avatars";
import { StillListItemImageConfig } from "@/components/StillListItem";

export async function getStaticPaths() {
  const { reviews } = await allReviews();
  const stills = await getStills(StillImageConfig);
  const posters = await getFluidWidthPosters(PosterImageConfig);
  const avatars = await getAvatars(ChipAvatarImageConfig);
  const stillListStills = await getStills(StillListItemImageConfig);

  return await Promise.all(
    reviews.map(async (review) => {
      let seoImageSrc = null;
      const imagePath = getStillImagePath(review.slug);
      if (imagePath in images) {
        const stillFile = await images[imagePath]!();

        const optimizedImage = await getImage({
          src: stillFile.default,
          width: 1200,
          height: 675,
          format: "jpeg",
          quality: 80,
        });

        seoImageSrc = optimizedImage.src;
      }

      return {
        params: {
          slug: review.slug,
        },
        props: {
          review: review,
          seoImageSrc: seoImageSrc,
          stillImageData: stills[review.slug],
          posterImageData: posters[review.slug],
          avatars: avatars,
          stillListStills: stillListStills,
        },
      };
    })
  );
}

interface Props {
  review: IReview;
  seoImageSrc: string;
  posterImageData: PosterImageData;
  stillImageData: StillImageData;
  avatars: Record<string, AvatarImageData>;
  stillListStills: Record<string, StillImageData>;
}

const {
  review,
  seoImageSrc,
  stillImageData,
  posterImageData,
  avatars,
  stillListStills,
} = Astro.props;
---

<Layout
  title={`${review.title} (${review.year})`}
  description={`${textStarsForGrade(review.grade)} ${review.excerptPlainText ?? ""}`}
  image={seoImageSrc}
  article
>
  <Review
    review={review}
    stillImageData={stillImageData}
    posterImageData={posterImageData}
    avatars={avatars}
    seoImageSrc={seoImageSrc}
    stillListStills={stillListStills}
  />
</Layout>
